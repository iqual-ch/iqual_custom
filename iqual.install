<?php

/**
 * @file
 */

use Drupal\user\Entity\Role;
use Drupal\pagedesigner\Entity\Element;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Field\Entity\BaseFieldOverride;

/**
 * @file
 * Install, update and uninstall functions for the iqual module.
 */

/**
 * Apply changes to configuration / environment on installation.
 */
function iqual_install() {
  _set_iqual_base_settings();
  $author = Role::load('author');
  if ($author) {
    $author->grantPermission('restful get frontendpublishing_transitions');
    $author->grantPermission('restful patch frontendpublishing_transitions');
    $author->grantPermission('restful patch frontendpublishing_move');
    $author->grantPermission('restful patch frontendpublishing_publish');
    $author->grantPermission('restful patch frontendpublishing_unpublish');
    $author->grantPermission('restful patch frontendpublishing_copy');
    $author->grantPermission('restful post frontendpublishing_copy');
    $author->save();
  }

  $editor = Role::load('editor');
  if ($editor) {
    $editor->grantPermission('restful get frontendpublishing_transitions');
    $editor->grantPermission('restful patch frontendpublishing_transitions');
    $editor->grantPermission('restful patch frontendpublishing_move');
    $editor->grantPermission('restful patch frontendpublishing_publish');
    $editor->grantPermission('restful patch frontendpublishing_unpublish');
    $editor->grantPermission('restful patch frontendpublishing_copy');
    $editor->grantPermission('restful post frontendpublishing_copy');
    $editor->save();
  }

  $designer = Role::load('designer');
  if ($designer) {
    $designer->grantPermission('restful get frontendpublishing_transitions');
    $designer->grantPermission('restful patch frontendpublishing_transitions');
    $designer->grantPermission('restful patch frontendpublishing_move');
    $designer->grantPermission('restful patch frontendpublishing_publish');
    $designer->grantPermission('restful patch frontendpublishing_unpublish');
    $designer->grantPermission('restful patch frontendpublishing_copy');
    $designer->grantPermission('restful post frontendpublishing_copy');
    $designer->save();
  }
}

/**
 * Set the base settings for iqual websites.
 */
function _set_iqual_base_settings() {
  $config = \Drupal::service('config.factory')->getEditable('pagedesigner.settings');
  $config->set('filter_format_longtext', 'plain_text');

  // Weitere Config setzen.
  $config->set('exclude_dom_elements_before', '#header');
  $config->set('exclude_dom_elements_after', 'footer');

  $config->set('loading_screen', [
    'format' => 'pagedesigner',
    'value' => '<p>Pagedesigner lÃ¤dt</p>',
  ]);

  $config->save();

  // Disable search pattern.
  $author = Role::load('author');
  if ($author) {
    $author->revokePermission('use pattern search');
    $author->save();
  }

  $editor = Role::load('editor');
  if ($editor) {
    $editor->revokePermission('use pattern search');
    $editor->save();
  }

  $designer = Role::load('designer');
  if ($designer) {
    $designer->revokePermission('use pattern search');
    $designer->save();
  }
}

/**
 * Apply changes to configuration / environment on installation.
 */
function iqual_update_8001() {
  _set_iqual_base_settings();
}

/**
 * Update the composer patches file with www redirection patch.
 */
function iqual_update_8002() {
  $patchFile = 'composer.patches.json';
  $modulePath = drupal_get_path('module', 'iqual');

  // Store current directory and switch to /var/www.
  $currentDirectory = getcwd();
  chdir('/var/www');

  // Add composer patches file.
  exec('composer config extra.patches-file composer.patches.json');

  // Create patches directory.
  if (!is_dir('/var/www/patches/')) {
    mkdir('/var/www/patches/');
  }

  // Move www redirection patch patch.
  copy('/var/www/public/' . $modulePath . '/patches/20200512_redirect_domain_keep_path.patch', '/var/www/patches/20200512_redirect_domain_keep_path.patch');

  // Add patch to composer.patches.json.
  if (file_exists('/var/www/' . $patchFile)) {
    $currentJson = json_decode(file_get_contents('/var/www/' . $patchFile), TRUE);
    $currentJson['patches']['drupal/redirect'] = ["Keep path on domain redirect" => "/var/www/patches/20200512_redirect_domain_keep_path.patch"];
    file_put_contents('/var/www/' . $patchFile, json_encode($currentJson, JSON_UNESCAPED_SLASHES));
  }
  else {
    file_put_contents('/var/www/' . $patchFile, '{"patches": {"drupal/redirect": {"Keep path on domain redirect": "/var/www/patches/20200512_redirect_domain_keep_path.patch"}}}');
  }

  // Change back to working directory.
  chdir($currentDirectory);

}

/**
 * Update the container translation config and set correct entity reference.
 */
function iqual_update_8003() {

  // Update configuration for container translations.
  _iqual_update_8003_setContainerFieldOverride('entity');
  _iqual_update_8003_setContainerFieldOverride('user_id');
  _iqual_update_8003_setContainerFieldOverride('container');
  _iqual_update_8003_setContainerFieldOverride('parent');

  // Make sure that container translations are correct.
  $eids = \Drupal::entityQuery('pagedesigner_element')->condition('type', 'container')->execute();

  // Update all children.
  foreach ($eids as $eid) {
    $container = Element::load($eid);
    $languages = \Drupal::service('language_manager')->getLanguages(LanguageInterface::STATE_ALL);
    foreach ($languages as $language) {
      if ($container->hasTranslation($language->getId())) {
        $containerTranslation = $container->getTranslation($language->getId());
        $containerTranslation->user_id->target_id = $container->user_id->target_id;
        $containerTranslation->entity->target_id = $container->entity->target_id;
        $containerTranslation->save();
        _iqual_update_8003_setEntity($containerTranslation, $container);
      }
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Delivers configuration updates for multilingual cross-linking via Linkit.
 * @see US-458, US-530
 */
function iqual_update_8004() {
  $config_storage = \Drupal::service('config.storage');

  // Linkit matchers config update.
  $default_linkit_profile = $config_storage->read('linkit.linkit_profile.default_linkit');
  $matchers = $default_linkit_profile['matchers'];
  foreach ($matchers as $matcher_id => $matcher) {
    $default_linkit_profile['matchers'][$matcher_id]['settings']['translated_entities'] = 3;
    $default_linkit_profile['matchers'][$matcher_id]['settings']['hide_untranslated_entities'] = FALSE;
  }
  $config_storage->write('linkit.linkit_profile.default_linkit', $default_linkit_profile);

  // Pagedesigner filter form config update.
  $filter_format_pagedesigner = $config_storage->read('filter.format.pagedesigner');
  $filter_format_pagedesigner['dependencies']['module'][] = 'linkit';
  $filter_format_pagedesigner['filters']['linkit'] = [
    'id' => 'linkit',
    'provider' => 'linkit',
    'status' => TRUE,
    'settings' => [
      'title' => TRUE,
    ],
  ];
  $config_storage->write('filter.format.pagedesigner', $filter_format_pagedesigner);
}

/**
 * Create or adapt the base field override (translatable) on container fields.
 */
function _iqual_update_8003_setContainerFieldOverride($fieldName) {
  $override = BaseFieldOverride::loadByName('pagedesigner_element', 'container', $fieldName);
  if (empty($override)) {
    $fields = \Drupal::service('entity_field.manager')->getBaseFieldDefinitions('pagedesigner_element');
    foreach ($fields as $id => $field) {
      if ($id == $fieldName) {
        $override = BaseFieldOverride::createFromBaseFieldDefinition($field, 'container');
      }
    }
  }
  $override->setTranslatable(FALSE);
  $override->save();
}

/**
 * Update the entity based on the container.
 */
function _iqual_update_8003_setEntity(Element $element, $container) {
  if ($element->entity->target_id != $container->entity->target_id) {
    $element->entity->target_id = $container->entity->target_id;
    $element->save();
  }
  foreach ($element->children as $item) {
    _iqual_update_8003_setEntity($item->entity, $container);
  }
  if ($element->hasField('field_styles')) {
    foreach ($element->field_styles as $item) {
      _iqual_update_8003_setEntity($item->entity, $container);
    }
  }
}
