<?php

/**
 * @file
 * Contains iqual.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\language\Entity\ConfigurableLanguage;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_alter().
 *
 * Apply iqual settings to forms.
 */
function iqual_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!empty($form['field_yoast_seo'])) {
    $config = \Drupal::config('iqual.settings');
    if ($config->get('hide_title_slug')) {
      $form['field_yoast_seo']['widget'][0]['yoast_seo']['#attached']['library'][] = "iqual/yoast_seo";
    }
  }
}

/**
 * Implements hook_preprocess_node_add_list().
 *
 * Remove add page links for defined content types.
 */
function iqual_preprocess_node_add_list(&$vars) {

  $config = \Drupal::config('iqual.settings');
  if ($config->get('hide_node_add_links')) {
    $contentTypesToRemmove = $config->get('hide_node_add_links');
  }

  foreach ($contentTypesToRemmove as $type) {
    unset($vars['content'][$type]);
    unset($vars['types'][$type]);
  }
}

/**
 * Implements hook_entity_type_alter().
 *
 * Extend Language config entity.
 */
function iqual_entity_type_alter(&$entity_types) {
  if (isset($entity_types['configurable_language'])) {
    $formHandlerClasses = $entity_types['configurable_language']->getHandlerClasses()['form'];
    $formHandlerClasses['default'] = 'Drupal\iqual\Form\LanguageEditForm';
    $formHandlerClasses['edit'] = 'Drupal\iqual\Form\LanguageEditForm';
    $entity_types['configurable_language']->setHandlerClass('form', $formHandlerClasses);
  }
}

/**
 * Implements hook_metatags_alter().
 *
 * Replace lang code with locale code in hreflang.
 */
function iqual_page_attachments_alter(array &$attachments) {
  foreach ($attachments['#attached']['html_head_link'] as $index => $attachment) {
    if ($attachment[0]['rel'] == 'alternate') {
      $languageLocaleCode = _get_locale_from_langcode($attachment[0]['hreflang']);
      if ($languageLocaleCode) {
        $attachments['#attached']['html_head_link'][$index][0]['hreflang'] = $languageLocaleCode;
      }
    }

    foreach ($attachments['#attached']['html_head'] as $index => $attachment) {
      if (substr($attachment[1], 0, 21) == 'hreflang_per_language') {
        $languageLocaleCode = _get_locale_from_langcode($attachment[0]['#attributes']['hreflang']);
        if ($languageLocaleCode) {
          $attachments['#attached']['html_head'][$index][0]['#attributes']['hreflang'] = $languageLocaleCode;
        }
      }
    }
  }
}

/**
 * Returns a language entity's locele code base on it's language code.
 */
function _get_locale_from_langcode($languageCode) {
  $languageEntity = ConfigurableLanguage::load($languageCode);
  $languageLocaleCode = FALSE;
  if ($languageEntity && $languageEntity->get('third_party_settings') && is_array($languageEntity->get('third_party_settings'))) {
    $languageThridPartySettings = $languageEntity->get('third_party_settings');
    if ($languageThridPartySettings && is_array($languageThridPartySettings)) {
      if (array_key_exists('iqual', $languageThridPartySettings) && is_array($languageThridPartySettings)) {
        if (array_key_exists('locale', $languageThridPartySettings['iqual'])) {
          $languageLocaleCode = $languageEntity->get('third_party_settings')['iqual']['locale'];
        }
      }
    }
  }
  return $languageLocaleCode;
}

/**
 * Implements hook_node_access().
 */
function iqual_node_access(NodeInterface $node, $op, AccountInterface $account) {
  if (!$account->isAnonymous()) {
    return;
  }
  $langcode = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
  if (!$node->hasTranslation($langcode)) {
    $access = AccessResult::forbidden();
  }
  else {
    $access = AccessResult::neutral();
  }
  $access->addCacheableDependency($node);
  $access->addCacheableDependency($account->getRoles());
  return $access;
}
